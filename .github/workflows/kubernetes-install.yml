name: Kubernetes and Infra Install

on:
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment (dev/prod)"
        required: false
        default: "dev"
      tf-prepare:
        type: boolean
        default: false
      tf-apply:
        type: boolean
        default: false
      tf-destroy:
        type: boolean
        default: false
      pg-install:
        type: boolean
        default: false
      consul-install:
        type: boolean
        default: false
      zookeeper-install:
        type: boolean
        default: false
      kafka-install:
        type: boolean
        default: false


jobs:
  running-inputs:
    environment: "${{github.event.inputs.environment}}"
    runs-on: ubuntu-latest
    steps:
      - name: Show inputs
        run: |
          echo "Deploying to: ${{ github.event.inputs.environment }}"
          echo "tf-prepare: ${{ github.event.inputs.tf-prepare }}"
          echo "JSON: ${{ toJSON(github.event.inputs) }}"
          echo "EKS cluster name: ${{ vars.TF_VAR_EKS_NEW_CLUSTERNAME }}"
          echo "Test variable value: ${{ vars.TESTVAR }}"
          echo "Test variable value: ${{ vars.ENV_VAR }}"
        env:
          ENV_VAR: ${{ vars.ENV_VAR }}
  tf-prepare:
    needs: running-inputs
    environment: "${{github.event.inputs.environment}}"
    if: github.event.inputs.tf-prepare == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.12.2

      - name: Verify tools
        run: |
          terraform version
          kubectl version --client
          helm version
          aws --version

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION || 'us-east-1' }}

      - name: Terraform Init and Plan
        run: |
          cd ./kubernetes-terraform
          terraform init
          terraform plan -backend-config="key=${{ vars.TF_VAR_EKS_NEW_CLUSTERNAME }}" -var "EKS_NEW_CLUSTERNAME=${{ vars.TF_VAR_EKS_NEW_CLUSTERNAME }}"

  tf-apply:
    needs: [running-inputs, tf-prepare]
    environment: "${{github.event.inputs.environment}}"
    if: github.event.inputs.tf-apply == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.12.2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION || 'us-east-1' }}

      - name: Terraform Apply
        run: |
          cd ./kubernetes-terraform
          terraform init
          terraform apply -var "EKS_NEW_CLUSTERNAME=${{ vars.TF_VAR_EKS_NEW_CLUSTERNAME }}" -auto-approve

  tf-post-install:
    needs: tf-apply
    environment: "${{github.event.inputs.environment}}"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.12.2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION || 'us-east-1' }}

      - name: Configure kubeconfig for EKS
        run: |
          aws eks update-kubeconfig --region ${{ vars.AWS_REGION || 'us-east-1' }} --name ${{ vars.TF_VAR_EKS_NEW_CLUSTERNAME }}

      - name: Terraform Post Install
        run: |
          cd ./kubernetes-terraform/post-configuration/
          terraform init
          terraform apply -var "EKS_NEW_CLUSTERNAME=${{ vars.TF_VAR_EKS_NEW_CLUSTERNAME }}" -auto-approve

  tf-destroy:
    if: github.event.inputs.tf-destroy == 'true'
    environment: "${{github.event.inputs.environment}}"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.12.2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION || 'us-east-1' }}

      - name: Terraform Destroy
        run: |
          cd ./kubernetes-terraform
          terraform init
          terraform destroy -backend-config="key=${{ vars.TF_VAR_EKS_NEW_CLUSTERNAME }}" -var "EKS_NEW_CLUSTERNAME=${{ vars.TF_VAR_EKS_NEW_CLUSTERNAME }}" -auto-approve

  pg-install:
    needs: tf-post-install
    environment: "${{github.event.inputs.environment}}"
    if: github.event.inputs.pg-install == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Show inputs
        run: |
          echo "tf-prepare: ${{ github.event.inputs.pg-install }}"
          echo "JSON: ${{ toJSON(github.event.inputs) }}"

      - name: Trigger PG install workflow
        uses: actions/github-script@v6
        with:
          script: |
            await github.rest.actions.createWorkflowDispatch({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: 'postgres-new-cluster-install.yml',
              ref: 'main'
            })

  consul-install:
    needs: tf-post-install
    environment: "${{github.event.inputs.environment}}"
    if: github.event.inputs.consul-install == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Show inputs
        run: |
          echo "tf-prepare: ${{ github.event.inputs.consul-install }}"
          echo "JSON: ${{ toJSON(github.event.inputs) }}"

      - name: Trigger Consul install workflow
        uses: actions/github-script@v6
        with:
          script: |
            await github.rest.actions.createWorkflowDispatch({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: 'consul-new-cluster-install.yml',
              ref: 'main'
            })

  zookeeper-install:
    needs: tf-post-install
    environment: "${{github.event.inputs.environment}}"
    if: github.event.inputs.zookeeper-install == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Show inputs
        run: |
          echo "tf-prepare: ${{ github.event.inputs.zookeeper-install }}"
          echo "JSON: ${{ toJSON(github.event.inputs) }}"

      - name: Trigger Zookeeper install workflow
        uses: actions/github-script@v6
        with:
          script: |
            await github.rest.actions.createWorkflowDispatch({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: 'zookeeper-new-cluster-install.yml',
              ref: 'main'
            })

  kafka-install:
    needs: [tf-post-install, zookeeper-install]
    environment: "${{github.event.inputs.environment}}"
    if: github.event.inputs.kafka-install == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Show inputs
        run: |
          echo "tf-prepare: ${{ github.event.inputs.kafka-install }}"
          echo "JSON: ${{ toJSON(github.event.inputs) }}"

      - name: Trigger Kafka install workflow
        uses: actions/github-script@v6
        with:
          script: |
            await github.rest.actions.createWorkflowDispatch({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: 'kafka-new-cluster-install.yml',
              ref: 'main'
            })