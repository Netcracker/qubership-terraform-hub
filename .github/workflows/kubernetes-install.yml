name: kubernetes-install

#on:
#  workflow_dispatch:
#    inputs:
#      confirm:
#        description: 'Type "apply" to run'
#        required: true
#        default: 'cancel'
#      #environment:
#      #  description: "Environment (dev/prod)"
#      #  required: false
#      #  default: "dev"
#      #tf_command:
#        #description: "Terraform command"
#        #required: true
#        #default: "plan"
#        #type: choice
#        #options:
#          #- plan
#          #- apply
#          #- destroy

on:
  workflow_dispatch:
    inputs:
      tf-prepare:
        type: boolean
      tf-destroy:
        type: boolean

jobs:
  tf-prepare:
    runs-on: ubuntu-latest
    #environment: ${{ github.event.inputs.environment || 'dev' }}

    steps:
      - id: get-selected-step
        uses: joao-zanutto/get-selected@v1.1.1

      - run: echo ${{ steps.get-selected-step.outputs.selected }}

      - name: Verify confirmation
        #if: ${{ steps.get-selected-step.outputs.selected != *"tf-prepare"* }}
        if: !contains(steps.get-selected-step.outputs.selected, 'tf-prepare')
        run: exit 1

      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.12.2

      - name: Verify tools
        run: |
          terraform version
          kubectl version --client
          helm version
          aws --version

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION || 'us-east-1' }}

      - name: Terraform Init and Plan
        run: |
          pwd
          cd ./kubernetes-terraform
          terraform init
          terraform plan -var "EKS_NEW_CLUSTERNAME=${{ vars.TF_VAR_EKS_NEW_CLUSTERNAME }}"

  tf-apply:
    needs: tf-prepare
    runs-on: ubuntu-latest
    #environment: ${{ github.event.inputs.environment || 'dev' }}

    steps:
#      - name: Verify confirmation
#        if: ${{ github.event.inputs.confirm != 'apply' }}
#        run: exit 1

      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.12.2

      - name: Verify tools
        run: |
          terraform version
          aws --version

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION || 'us-east-1' }}

      - name: Terraform Apply
        run: |
          pwd
          cd ./kubernetes-terraform
          terraform init
          #terraform apply -var "EKS_NEW_CLUSTERNAME=${{ vars.TF_VAR_EKS_NEW_CLUSTERNAME }}" -auto-approve
          #terraform state list

  tf-destroy:
    runs-on: ubuntu-latest
    #environment: ${{ github.event.inputs.environment || 'dev' }}

    steps:
      - id: get-selected-step
        uses: joao-zanutto/get-selected@v1.1.1

      - run: echo ${{ steps.get-selected-step.outputs.selected }}

      - name: Verify confirmation
        #if: ${{ steps.get-selected-step.outputs.selected != *"tf-prepare"* }}
        if: !contains(steps.get-selected-step.outputs.selected, 'tf-destroy')
        run: exit 1

      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.12.2

      - name: Verify tools
        run: |
          terraform version
          aws --version

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION || 'us-east-1' }}

      - name: Terraform Destroy
        run: |
          cd ./kubernetes-terraform
          terraform init
          terraform destroy -var "EKS_NEW_CLUSTERNAME=${{ vars.TF_VAR_EKS_NEW_CLUSTERNAME }}" -auto-approve