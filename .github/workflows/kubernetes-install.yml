name: Kubernetes and Infra Install

on:
  workflow_dispatch:
    inputs:
      tf-prepare:
        type: boolean
        default: false
      tf-apply:
        type: boolean
        default: false
      tf-destroy:
        type: boolean
        default: false
      pg-install:
        type: boolean
        default: false

jobs:
  debug-inputs:
    runs-on: ubuntu-latest
    steps:
      - name: Show inputs
        run: |
          echo "tf-prepare: ${{ github.event.inputs.tf-prepare }}"
          echo "JSON: ${{ toJSON(github.event.inputs) }}"
  tf-prepare:
    needs: debug-inputs
    if: github.event.inputs.tf-prepare == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.12.2

      - name: Verify tools
        run: |
          terraform version
          kubectl version --client
          helm version
          aws --version

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION || 'us-east-1' }}

      - name: Terraform Init and Plan
        run: |
          cd ./kubernetes-terraform
          terraform init
          terraform plan -var "EKS_NEW_CLUSTERNAME=${{ vars.TF_VAR_EKS_NEW_CLUSTERNAME }}"

  tf-apply:
    needs: [debug-inputs, tf-prepare]
    if: github.event.inputs.tf-apply == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.12.2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION || 'us-east-1' }}

      - name: Terraform Apply
        run: |
          cd ./kubernetes-terraform
          terraform init
          terraform apply -var "EKS_NEW_CLUSTERNAME=${{ vars.TF_VAR_EKS_NEW_CLUSTERNAME }}" -auto-approve

  tf-destroy:
    if: github.event.inputs.tf-destroy == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.12.2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION || 'us-east-1' }}

      - name: Terraform Destroy
        run: |
          cd ./kubernetes-terraform
          terraform init
          terraform destroy -var "EKS_NEW_CLUSTERNAME=${{ vars.TF_VAR_EKS_NEW_CLUSTERNAME }}" -auto-approve

  pg-install:
    if: github.event.inputs.pg-install == 'true'
    runs-on: ubuntu-latest
    needs: [tf-prepare, tf-apply]  # Depends on EKS creation status
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Clone pgskipper-operator
        uses: actions/checkout@v4
        with:
          repository: Netcracker/pgskipper-operator
          path: pgskipper-operator

      - name: Setup kubectl and Helm
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.32.0'

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION || 'us-east-1' }}

      - name: Configure kubeconfig
        run: |
          aws eks update-kubeconfig --region ${{ vars.AWS_REGION || 'us-east-1' }} --name ${{ vars.TF_VAR_EKS_NEW_CLUSTERNAME }}

      - name: Install PostgreSQL
        run: |
          cd ./pg_skipper
          terraform init
          terraform apply -var "PG_INSTALL_NAMESPACE=${{ vars.TF_VAR_PG_INSTALL_NAMESPACE }}" -auto-approve